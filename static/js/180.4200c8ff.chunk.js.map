{"version":3,"file":"static/js/180.4200c8ff.chunk.js","mappings":"yQAcMA,EAASC,EAAAA,GAAW,CACxBC,MAAOD,EAAAA,KAAaE,IAAI,GAAGC,WAC3BC,SAAUJ,EAAAA,KAAcG,aAGX,SAASE,IAAQ,IAAD,EACvBC,GAAOC,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAWA,EAAMC,KAAKH,IAAtB,IAEpBI,GAAOC,EAAAA,EAAAA,MAAPD,GAEFE,GAAWC,EAAAA,EAAAA,MACjB,GAKIC,EAAAA,EAAAA,IAAe,CACjBC,UAAUC,EAAAA,EAAAA,GAAYjB,KALZkB,EADZ,EACEC,SACcC,EAFhB,EAEEC,aACAC,EAHF,EAGEA,SACqBC,EAJvB,EAIEC,UAAaC,OA6Bf,OAVAC,EAAAA,EAAAA,YAAU,WACR,GAAInB,GAAQA,EAAKoB,QAAUhB,EAAI,CAC7B,IAAMD,EAAOH,EAAKqB,MAAK,SAACC,GAAD,OAAQC,OAAOnB,KAAQkB,EAAGlB,EAA1B,IACnBD,IACFY,EAAS,QAASZ,EAAKR,OACvBoB,EAAS,WAAYZ,EAAKL,UAE7B,CACF,GAAE,CAACM,EAAIW,KAGN,iBAAKS,UAAU,YAAf,WACE,6CACA,kBAAMC,SAAUZ,GA3BH,SAACa,GAChB,GAAI1B,GAAQA,EAAKoB,QAAUhB,GACZJ,EAAKqB,MAAK,SAACC,GAAD,OAAQC,OAAOnB,KAAQkB,EAAGlB,EAA1B,IACb,CACR,IAAMuB,GAAc,kBAAQD,GAAR,IAActB,IAAKA,IAEvC,YADAE,EAASsB,EAAAA,EAAAA,WAA2BD,GAErC,CAEHrB,EAASsB,EAAAA,EAAAA,SAAA,kBAA6BF,GAA7B,IAAmCtB,GAAIyB,KAAKC,UACrDf,EAAS,QAAS,IAClBA,EAAS,YAAY,EACtB,IAeG,WACE,kBAAOgB,QAAQ,qBAAqBP,UAAU,aAA9C,wBAGA,oCACMb,EAAa,UADnB,IAEEqB,KAAK,OACLR,UAAU,kBAGXR,EAAUrB,QAAS,uBAAIqB,EAAUrB,MAAMsC,WAExC,iBAAKT,UAAU,kBAAf,WACE,oCACMb,EAAa,aADnB,IAEEqB,KAAK,WACLR,UAAU,mBACVpB,GAAG,eAEL,kBAAOoB,UAAU,mBAAmBO,QAAQ,WAA5C,uBAGA,iCAAIf,EAAUlB,gBAAd,aAAI,EAAoBmC,cAE1B,kBAAOD,KAAK,gBAInB,C,2DCpFY/B,E,QAAkDiC,E","sources":["Pages/Form/Form.tsx","Store/hooks.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { todoSliceAction } from \"../Todo/Action/ruducer/TodoSlice\";\nimport { ITask } from \"../Interface/interface\";\nimport { RootState } from \"../../Store/config\";\nimport { useParams } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport { useAppSelector } from \"../../Store/hooks\";\n\nconst schema = yup.object({\n  title: yup.string().min(4).required(),\n  complete: yup.boolean().required(),\n});\n\nexport default function Form() {\n  const list = useAppSelector((state) => state.todo.list);\n\n  const { id } = useParams();\n\n  const dispatch = useDispatch();\n  const {\n    register: todoRegister,\n    handleSubmit: todoSubmit,\n    setValue,\n    formState: { errors: todoError },\n  } = useForm<ITask>({\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = (data: ITask) => {\n    if (list && list.length && id) {\n      const todo = list.find((el) => Number(id) === el.id);\n      if (todo) {\n        const newTodo: ITask = { ...data, id: +id };\n        dispatch(todoSliceAction.updateToDo(newTodo));\n        return;\n      }\n    }\n    dispatch(todoSliceAction.addToDo({ ...data, id: Date.now() }));\n    setValue(\"title\", \"\");\n    setValue(\"complete\", true);\n  };\n\n  useEffect(() => {\n    if (list && list.length && id) {\n      const todo = list.find((el) => Number(id) === el.id);\n      if (todo) {\n        setValue(\"title\", todo.title);\n        setValue(\"complete\", todo.complete);\n      }\n    }\n  }, [id, setValue]);\n\n  return (\n    <div className=\"container\">\n      <h3>Form Validation</h3>\n      <form onSubmit={todoSubmit(onSubmit)}>\n        <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">\n          Todo List\n        </label>\n        <input\n          {...todoRegister(\"title\")}\n          type=\"text\"\n          className=\"form-control\"\n        />\n\n        {todoError.title && <p>{todoError.title.message}</p>}\n\n        <div className=\"mb-3 form-check\">\n          <input\n            {...todoRegister(\"complete\")}\n            type=\"checkbox\"\n            className=\"form-check-input\"\n            id=\"checkbox\"\n          />\n          <label className=\"form-check-label\" htmlFor=\"checkbox\">\n            Complete\n          </label>\n          <p>{todoError.complete?.message}</p>\n        </div>\n        <input type=\"submit\" />\n      </form>\n    </div>\n  );\n}\n\nfunction todo(arg0: { payload: ITask; type: string }, todo: any, arg2: {}) {\n  throw new Error(\"Function not implemented.\");\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './config';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"],"names":["schema","yup","title","min","required","complete","Form","list","useAppSelector","state","todo","id","useParams","dispatch","useDispatch","useForm","resolver","yupResolver","todoRegister","register","todoSubmit","handleSubmit","setValue","todoError","formState","errors","useEffect","length","find","el","Number","className","onSubmit","data","newTodo","todoSliceAction","Date","now","htmlFor","type","message","useSelector"],"sourceRoot":""}